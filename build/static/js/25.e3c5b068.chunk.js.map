{"version":3,"sources":["../node_modules/@material-ui/core/esm/ListItemSecondaryAction/ListItemSecondaryAction.js","components/HealthCheck/Listing/_config/machine.ts","components/HealthCheck/Listing/_partials/EmptyListing.tsx","components/ViewIconButton/ViewIconButton.tsx","components/HealthCheck/Listing/_partials/QuizList.tsx","components/HealthCheck/Listing/_config/styles.ts","components/HealthCheck/Listing/Listing.tsx","pages/HealthCheck/listing.tsx","components/SectionTitle/_config/styles.ts","components/SectionTitle/SectionTitle.tsx","data/healthChecks/HealthCheckLogic.ts","components/IconDeleteButton/IconDeleteButtonwDialog.tsx","../node_modules/@material-ui/icons/Visibility.js"],"names":["ListItemSecondaryAction","React","props","ref","classes","className","other","_objectWithoutProperties","_extends","clsx","root","muiName","withStyles","position","right","top","transform","name","HCListingMachine","Machine","key","initial","states","loading","on","IS_EMPTY","HAS_ITEMS","empty","hasItems","EmptyListing","CardContent","Typography","variant","to","PrivateRoutes","ClientList","routeVarReplacement","HealthCheckQuiz","ViewIconButton","goTo","Tooltip","title","IconButton","component","Link","QuizList","clientQuizzes","removeHealthCheck","removeItem","useCallback","id","e","preventDefault","List","map","quiz","ListItem","ListItemText","primary","secondary","createdAt","format","HealthCheckSummary","IconDeleteButtonwDialog","onClick","useListingStyles","makeStyles","actions","display","justifyContent","alignItems","Listing","useMachine","state","send","useContext","ClientContext","currentClient","lastViewedHC","dispatch","useState","setClientQuizzess","styles","useEffect","fetchQuizzes","a","HealthCheckUseCase","findClientHealthChecks","q","length","delete","type","ClientActionTypes","UpdateLastViewedHC","payload","copy","filter","item","console","error","stack","Card","value","Loading","renderQuizData","Divider","Button","startIcon","size","color","HCListing","role","SectionTitle","Box","Spacer","space","Grid","sm","useSTStyles","theme","fontWeight","marginBottom","spacing","breakpoints","down","fontSize","typography","h5","children","HealthCheckDB","healthChecks","clientId","this","database","transaction","table","where","first","equals","toArray","ILogicLayer","dialogOpen","setDialogOpen","onDialogClose","open","onClose","onCancel","onConfirm","_interopRequireDefault","require","_interopRequireWildcard","Object","defineProperty","exports","default","_default","createElement","d"],"mappings":"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","file":"static/js/25.e3c5b068.chunk.js","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    position: 'absolute',\n    right: 16,\n    top: '50%',\n    transform: 'translateY(-50%)'\n  }\n};\n/**\n * Must be used as the last child of ListItem to function properly.\n */\n\nvar ListItemSecondaryAction = /*#__PURE__*/React.forwardRef(function ListItemSecondaryAction(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\"]);\n\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    className: clsx(classes.root, className),\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? ListItemSecondaryAction.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component, normally an `IconButton` or selection control.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string\n} : void 0;\nListItemSecondaryAction.muiName = 'ListItemSecondaryAction';\nexport default withStyles(styles, {\n  name: 'MuiListItemSecondaryAction'\n})(ListItemSecondaryAction);","import { Machine } from \"xstate\"\n\nexport type StateMap = \"loading\" | \"empty\" | \"hasItems\"\n\n/**\n * Health checking listing state machine schema\n *\n * @export\n * @interface IHCListingSchema\n */\nexport interface IHCListingSchema {\n\tstates: {\n\t\tloading: Record<string, unknown>\n\t\tempty: Record<string, unknown>\n\t\thasItems: Record<string, unknown>\n\t}\n}\n\nexport type HCListingEvents = { type: \"IS_EMPTY\" } | { type: \"HAS_ITEMS\" }\n\n/**\n * Defines the state machine used for the Health check\n * listing component\n *\n */\nexport const HCListingMachine = Machine<\n\tnull,\n\tIHCListingSchema,\n\tHCListingEvents\n>({\n\tkey: \"hc_listing_machine\",\n\tinitial: \"loading\",\n\tstates: {\n\t\tloading: {\n\t\t\ton: {\n\t\t\t\tIS_EMPTY: \"empty\",\n\t\t\t\tHAS_ITEMS: \"hasItems\",\n\t\t\t},\n\t\t},\n\t\tempty: {},\n\t\thasItems: {\n\t\t\ton: {\n\t\t\t\tIS_EMPTY: \"empty\",\n\t\t\t},\n\t\t},\n\t},\n})\n","import React, { ReactElement } from \"react\"\nimport { CardContent, Typography } from \"@material-ui/core\"\nimport { Link } from \"react-router-dom\"\nimport {\n\tPrivateRoutes,\n\trouteVarReplacement,\n} from \"../../../../util/routes/routes\"\n\n/**\n * Message displayed when a client has no completed quizzes\n *\n * @returns ReactElement\n */\nconst EmptyListing = (): ReactElement => (\n\t<CardContent>\n\t\t<Typography variant=\"h6\">No Health Checks have been found</Typography>\n\t\t<Typography>\n\t\t\tCheck that you have the correct{\" \"}\n\t\t\t<Link to={PrivateRoutes.ClientList}>client selected</Link> or{\" \"}\n\t\t\t<Link\n\t\t\t\tto={routeVarReplacement(PrivateRoutes.HealthCheckQuiz, [[\":id?\", \"\"]])}\n\t\t\t>\n\t\t\t\tstart a new Health Check\n\t\t\t</Link>\n\t\t\t.\n\t\t</Typography>\n\t</CardContent>\n)\n\nexport default EmptyListing\n","import React, { ReactElement } from \"react\"\nimport VisibilityIcon from \"@material-ui/icons/Visibility\"\nimport { Tooltip, IconButton } from \"@material-ui/core\"\nimport { Link } from \"react-router-dom\"\nimport { PrivateRoutes, PublicRoutes } from \"../../util/routes/routes\"\n\ntype Props = {\n\tgoTo: string | PrivateRoutes | PublicRoutes\n}\n\n/**\n * Icon Button used to go to a page\n *\n * @export\n * @param {Props} { goTo }\n * @returns {ReactElement}\n */\nexport default function ViewIconButton({ goTo }: Props): ReactElement {\n\treturn (\n\t\t<Tooltip title=\"View\">\n\t\t\t<IconButton component={Link} to={goTo}>\n\t\t\t\t<VisibilityIcon />\n\t\t\t\t<span className=\"MuiTypography-srOnly\">View resutls</span>\n\t\t\t</IconButton>\n\t\t</Tooltip>\n\t)\n}\n","import React, { ReactElement, MouseEvent, useCallback } from \"react\"\nimport {\n\tList,\n\tListItem,\n\tListItemText,\n\tListItemSecondaryAction,\n} from \"@material-ui/core\"\nimport { format } from \"date-fns\"\nimport {\n\trouteVarReplacement,\n\tPrivateRoutes,\n} from \"../../../../util/routes/routes\"\nimport { IQuizListProps } from \"../_config/shape\"\nimport IconDeleteButtonwDialog from \"../../../IconDeleteButton/IconDeleteButtonwDialog\"\nimport { HealthCheckId } from \"../../../../data/_config/shape\"\nimport ViewIconButton from \"../../../ViewIconButton\"\n\n/**\n * Renders a list of completed health checks\n *\n * @param {IBaseHealthCheck[]} {clientQuizzes}\n * @param {Function} {removeHealthCheck}\n * @returns ReactElement\n */\nconst QuizList = ({\n\tclientQuizzes,\n\tremoveHealthCheck,\n}: IQuizListProps): ReactElement => {\n\tconst removeItem = useCallback(\n\t\t(id: HealthCheckId) =>\n\t\t\t(e: MouseEvent<HTMLButtonElement>): void => {\n\t\t\t\te.preventDefault()\n\t\t\t\tremoveHealthCheck(id)\n\t\t\t},\n\t\t[removeHealthCheck]\n\t)\n\n\treturn (\n\t\t<List>\n\t\t\t{clientQuizzes.map(\n\t\t\t\t(quiz): ReactElement => (\n\t\t\t\t\t<ListItem key={quiz.id} className=\"list-item-padded\">\n\t\t\t\t\t\t<ListItemText\n\t\t\t\t\t\t\tprimary=\"Completed Health Check\"\n\t\t\t\t\t\t\tsecondary={\n\t\t\t\t\t\t\t\tquiz.createdAt\n\t\t\t\t\t\t\t\t\t? format(quiz.createdAt, \"dd/MM/yyyy hh:mm a\")\n\t\t\t\t\t\t\t\t\t: false\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<ListItemSecondaryAction>\n\t\t\t\t\t\t\t<ViewIconButton\n\t\t\t\t\t\t\t\tgoTo={routeVarReplacement(PrivateRoutes.HealthCheckSummary, [\n\t\t\t\t\t\t\t\t\t[\":id\", `${quiz.id}`],\n\t\t\t\t\t\t\t\t])}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<IconDeleteButtonwDialog onClick={removeItem(quiz.id || \"\")} />\n\t\t\t\t\t\t</ListItemSecondaryAction>\n\t\t\t\t\t</ListItem>\n\t\t\t\t)\n\t\t\t)}\n\t\t</List>\n\t)\n}\n\nexport default QuizList\n","import { makeStyles } from \"@material-ui/core\"\n\n// Health check Listing styling\nconst useListingStyles = makeStyles(() => ({\n\tactions: {\n\t\tdisplay: \"flex\",\n\t\tjustifyContent: \"flex-end\",\n\t\talignItems: \"center\",\n\t},\n}))\n\nexport default useListingStyles\n","import React, { ReactElement, useEffect, useContext, useState } from \"react\"\nimport { Card, CardContent, Divider, Button } from \"@material-ui/core\"\nimport { Link } from \"react-router-dom\"\nimport AddIcon from \"@material-ui/icons/Add\"\nimport { useMachine } from \"@xstate/react\"\nimport { ClientContext } from \"../../../state/client\"\nimport { PrivateRoutes, routeVarReplacement } from \"../../../util/routes/routes\"\nimport { HCListingMachine } from \"./_config/machine\"\nimport { EmptyListing, QuizList } from \"./_partials\"\nimport Loading from \"../../Loading\"\nimport useListingStyles from \"./_config/styles\"\nimport {\n\tHealthCheckDataStruct,\n\tClientId,\n\tHealthCheckId,\n} from \"../../../data/_config/shape\"\nimport HealthCheckUseCase from \"../../../data/healthChecks/HealthCheckLogic\"\nimport { ClientActionTypes } from \"../../../state/client/client-outline\"\n\n/**\n * Component used to render the completed health checks for the\n * current client\n *\n * @returns ReactElement\n */\nconst Listing = (): ReactElement => {\n\tconst [state, send] = useMachine(HCListingMachine)\n\tconst {\n\t\tstate: { currentClient, lastViewedHC },\n\t\tdispatch,\n\t} = useContext(ClientContext)\n\tconst [clientQuizzes, setClientQuizzess] = useState<HealthCheckDataStruct[]>(\n\t\t[]\n\t)\n\tconst styles = useListingStyles()\n\n\tuseEffect(() => {\n\t\tconst fetchQuizzes = async (id: ClientId): Promise<void> => {\n\t\t\tconst q = await HealthCheckUseCase.findClientHealthChecks(id)\n\t\t\tif (q.length === 0) {\n\t\t\t\t// show empty warning\n\t\t\t\tsend(\"IS_EMPTY\")\n\t\t\t} else {\n\t\t\t\t// set the client quizzes and show the items\n\t\t\t\tsetClientQuizzess(q)\n\t\t\t\tsend(\"HAS_ITEMS\")\n\t\t\t}\n\t\t}\n\n\t\t// Find fetching for the indexeddb is completed\n\t\tif (currentClient?.id) {\n\t\t\t// If there isn't a client, show empty warning\n\t\t\tif (!currentClient) {\n\t\t\t\tsend(\"IS_EMPTY\")\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tfetchQuizzes(currentClient.id)\n\t\t}\n\t}, [currentClient, send])\n\n\t/**\n\t * Removes a quiz from the db and state\n\t *\n\t * @param {number} id ID of the health check to remove\n\t * @returns Promise<void>\n\t */\n\tconst removeHealthCheck = async (id: HealthCheckId): Promise<void> => {\n\t\ttry {\n\t\t\tconst count = await HealthCheckUseCase.delete(id)\n\n\t\t\t// count === number of items deleted\n\t\t\t// only proceed if 1 or more was deleted (ideally should always be 1)\n\t\t\tif (count > 0) {\n\t\t\t\tif (lastViewedHC !== null && `${id}` === `${lastViewedHC}`) {\n\t\t\t\t\tdispatch({\n\t\t\t\t\t\ttype: ClientActionTypes.UpdateLastViewedHC,\n\t\t\t\t\t\tpayload: null,\n\t\t\t\t\t})\n\t\t\t\t}\n\n\t\t\t\tconst copy = clientQuizzes.filter((item) => item.id !== id)\n\t\t\t\tif (copy.length === 0) {\n\t\t\t\t\tsend(\"IS_EMPTY\")\n\t\t\t\t}\n\t\t\t\tsetClientQuizzess(copy)\n\t\t\t}\n\t\t} catch (e) {\n\t\t\t// TODO: At least show a toast message, please\n\t\t\tconsole.error(e.stack || e) // eslint-disable-line\n\t\t}\n\t}\n\n\t/**\n\t * Render a specific component for state of the state machine\n\t *\n\t * @returns ReactElement\n\t */\n\tconst renderQuizData = (): ReactElement => {\n\t\tswitch (state.value) {\n\t\t\tcase \"empty\":\n\t\t\t\treturn <EmptyListing />\n\n\t\t\tcase \"hasItems\":\n\t\t\t\treturn (\n\t\t\t\t\t<QuizList\n\t\t\t\t\t\tclientQuizzes={clientQuizzes}\n\t\t\t\t\t\tremoveHealthCheck={removeHealthCheck}\n\t\t\t\t\t/>\n\t\t\t\t)\n\n\t\t\tcase \"loading\":\n\t\t\tdefault:\n\t\t\t\treturn <Loading />\n\t\t}\n\t}\n\n\treturn (\n\t\t<Card>\n\t\t\t{renderQuizData()}\n\t\t\t<Divider />\n\t\t\t<CardContent className={styles.actions}>\n\t\t\t\t<Button\n\t\t\t\t\tstartIcon={<AddIcon />}\n\t\t\t\t\tsize=\"medium\"\n\t\t\t\t\tcomponent={Link}\n\t\t\t\t\tto={routeVarReplacement(PrivateRoutes.HealthCheckQuiz, [\n\t\t\t\t\t\t[\":id?\", \"\"],\n\t\t\t\t\t])}\n\t\t\t\t\tcolor=\"primary\"\n\t\t\t\t\tvariant=\"contained\"\n\t\t\t\t>\n\t\t\t\t\tStart a new Health Check\n\t\t\t\t</Button>\n\t\t\t</CardContent>\n\t\t</Card>\n\t)\n}\n\nexport default Listing\n","import React, { ReactElement } from \"react\"\nimport { Typography, Grid, Box } from \"@material-ui/core\"\nimport { PageContainer } from \"../../components/Layouts\"\nimport Listing from \"../../components/HealthCheck/Listing/Listing\"\nimport SectionTitle from \"../../components/SectionTitle\"\nimport Spacer from \"../../components/Spacer\"\n\n/**\n * Health check listing page\n *\n * @returns ReactElement\n */\nconst HCListing = (): ReactElement => (\n\t<>\n\t\t<PageContainer role=\"main\">\n\t\t\t<SectionTitle component=\"h1\">Saved Health Checks</SectionTitle>\n\t\t\t<Box className=\"content-area\">\n\t\t\t\t<Typography>\n\t\t\t\t\tUse your previous Health Checks to review your progress.\n\t\t\t\t</Typography>\n\t\t\t\t<Typography>\n\t\t\t\t\tView your past results by selecting from the list below.\n\t\t\t\t</Typography>\n\t\t\t</Box>\n\t\t\t<Spacer space={3} />\n\t\t\t<Grid item sm={6}>\n\t\t\t\t<Listing />\n\t\t\t</Grid>\n\t\t</PageContainer>\n\t</>\n)\n\nexport default HCListing\n","import { makeStyles } from \"@material-ui/core\"\n\n// Section title styles\nconst useSTStyles = makeStyles((theme) => ({\n\ttitle: {\n\t\tfontWeight: 500,\n\t\tmarginBottom: theme.spacing(2),\n\t\t[theme.breakpoints.down(\"sm\")]: {\n\t\t\tfontSize: theme.typography.h5.fontSize,\n\t\t},\n\t},\n}))\n\nexport default useSTStyles\n","import React, { ReactElement } from \"react\"\nimport { Typography } from \"@material-ui/core\"\nimport { SectionTitleProps } from \"./_config/shape\"\nimport useSTStyles from \"./_config/styles\"\n\n/**\n * Abstraction for the Typography for a consistent heading for sections\n *\n * @param {SectionTitleProps} props Mimics the props for `<Typography>`\n * @returns ReactElement\n */\nconst SectionTitle = ({\n\tchildren,\n\tclassName,\n\t// eslint-disable-next-line\n\t...props\n}: SectionTitleProps): ReactElement => {\n\tconst styles = useSTStyles()\n\treturn (\n\t\t<Typography\n\t\t\tvariant=\"h4\"\n\t\t\tcolor=\"textPrimary\"\n\t\t\tclassName={`${styles.title} ${className}`}\n\t\t\t// eslint-disable-next-line react/jsx-props-no-spreading\n\t\t\t{...props}\n\t\t>\n\t\t\t{children}\n\t\t</Typography>\n\t)\n}\n\nexport default SectionTitle\n","import ILogicLayer from \"../_config/logicLayer\"\nimport HealthCheckDB from \"./HealthCheckDatabase\"\nimport {\n\tHealthCheckDataStruct,\n\tBaseHealthCheckStruct,\n\tHealthCheckId,\n\tClientId,\n} from \"../_config/shape\"\n\n/**\n * Logic implementation for the Health check database\n *\n * @class HealthCheckLogic\n * @extends {ILogicLayer<HealthCheckDataStruct, BaseHealthCheckStruct>}\n */\nclass HealthCheckLogic extends ILogicLayer<\n\tHealthCheckDataStruct,\n\tBaseHealthCheckStruct\n> {\n\t/**\n\t * Creates an instance of HealthCheckLogic.\n\t *\n\t * @memberof HealthCheckLogic\n\t */\n\tconstructor() {\n\t\tsuper(HealthCheckDB, HealthCheckDB.healthChecks)\n\t}\n\n\t/**\n\t * Finds a health check by the id and clientId\n\t *\n\t * @param {HealthCheckId} id\n\t * @param {ClientId} clientId\n\t * @returns {Promise<HealthCheckDataStruct>}\n\t * @memberof HealthCheckLogic\n\t */\n\tpublic findByClientId(\n\t\tid: HealthCheckId,\n\t\tclientId: ClientId\n\t): Promise<HealthCheckDataStruct | undefined> {\n\t\treturn this.database.transaction(\"r\", this.table.name, () =>\n\t\t\tthis.table.where({ id, clientId }).first()\n\t\t)\n\t}\n\n\t/**\n\t * Finds all the health checks for a given client\n\t *\n\t * @param {ClientId} clientId\n\t * @returns {Promise<HealthCheckDataStruct[]>}\n\t * @memberof HealthCheckLogic\n\t */\n\tpublic findClientHealthChecks(\n\t\tclientId: ClientId\n\t): Promise<HealthCheckDataStruct[]> {\n\t\treturn this.database.transaction(\"r\", this.table.name, () =>\n\t\t\tthis.table.where(\"clientId\").equals(clientId).toArray()\n\t\t)\n\t}\n}\n\n// Creates a instance of the logic class and exports the instance\nconst HealthCheckUseCase = new HealthCheckLogic()\n\nexport default HealthCheckUseCase\n","import React, { ReactElement, MouseEvent, useState } from \"react\"\nimport { ButtonProps } from \"./IconDeleteButton\"\nimport IconDeleteButton from \".\"\nimport ConfirmDialogue from \"../ConfirmDialogue\"\n\n/**\n * Icon delete button with a confirm dialog component\n *\n * @export\n * @param {ButtonProps} {\n * \tonClick,\n * }\n * @returns {ReactElement}\n */\nexport default function IconDeleteButtonwDialog({\n\tonClick,\n}: ButtonProps): ReactElement {\n\tconst [dialogOpen, setDialogOpen] = useState<boolean>(false)\n\n\t/**\n\t * Closes the dialog\n\t *\n\t */\n\tfunction onDialogClose(): void {\n\t\tsetDialogOpen(false)\n\t}\n\n\t/**\n\t * Performs onClick prop function\n\t *\n\t * @param {MouseEvent<HTMLButtonElement>} e\n\t */\n\tfunction onDialogConfirm(e: MouseEvent<HTMLButtonElement>): void {\n\t\tonClick(e)\n\t\tonDialogClose()\n\t}\n\n\t/**\n\t * Opens the dialog\n\t *\n\t * @param {MouseEvent<HTMLButtonElement>} e\n\t */\n\tfunction triggerDialog(e: MouseEvent<HTMLButtonElement>): void {\n\t\te.preventDefault()\n\t\tsetDialogOpen(true)\n\t}\n\n\treturn (\n\t\t<>\n\t\t\t<IconDeleteButton onClick={triggerDialog} />\n\t\t\t<ConfirmDialogue\n\t\t\t\topen={dialogOpen}\n\t\t\t\tonClose={onDialogClose}\n\t\t\t\tonCancel={onDialogClose}\n\t\t\t\tonConfirm={onDialogConfirm}\n\t\t\t>\n\t\t\t\tAre you sure you want to remove this item?\n\t\t\t</ConfirmDialogue>\n\t\t</>\n\t)\n}\n","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M12 4.5C7 4.5 2.73 7.61 1 12c1.73 4.39 6 7.5 11 7.5s9.27-3.11 11-7.5c-1.73-4.39-6-7.5-11-7.5zM12 17c-2.76 0-5-2.24-5-5s2.24-5 5-5 5 2.24 5 5-2.24 5-5 5zm0-8c-1.66 0-3 1.34-3 3s1.34 3 3 3 3-1.34 3-3-1.34-3-3-3z\"\n}), 'Visibility');\n\nexports.default = _default;"],"sourceRoot":""}