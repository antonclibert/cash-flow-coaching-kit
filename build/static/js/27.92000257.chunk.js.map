{"version":3,"sources":["components/HealthCheck/Questionnaire/_config/styles.ts","components/HealthCheck/Questionnaire/_partials/OptionTile.tsx","components/NoClientError/NoClientError.tsx","components/HealthCheck/Questionnaire/Questionnaire.tsx","content/tips/HCQuestionnaireTips.tsx","pages/HealthCheck/questionnaire.tsx","content/tips/style.ts","components/PageTip/_config/style.ts","components/PageTip/PageTip.tsx","components/SectionTitle/_config/styles.ts","components/SectionTitle/SectionTitle.tsx","data/healthChecks/HealthCheckLogic.ts"],"names":["useQuestionnaireStyles","makeStyles","theme","actions","display","flexDirection","marginTop","spacing","breakpoints","up","justifyContent","down","marginBottom","subtitle","lineHeight","title","fontSize","typography","h5","useOptionTileStyles","cardContent","alignItems","OptionTile","optionKey","option","currentAnswer","changeAnswer","style","getOptionByAnswer","answerTheming","muiTheme","useTheme","Card","onClick","e","boxShadow","palette","primary","main","CardActionArea","CardContent","className","Typography","variant","Icon","color","NoClientError","useContext","ClientContext","state","currentClient","clientSynced","id","Questionnaire","useCurrentClient","styles","useState","answers","setAnswers","questionCount","setQuestionCount","questions","currentQuestion","setCurrentQuestion","generateKey","key","history","useHistory","stepLabels","map","q","question","useEffect","answer","preventDefault","copy","isFinalQuestion","length","handleSubmit","a","alert","HealthCheckUseCase","create","clientId","createdAt","newTimestamp","dbKey","push","routeVarReplacement","PrivateRoutes","HealthCheckSummary","console","error","stack","Box","Stepper","activeStep","orientation","paddingLeft","paddingRight","label","Step","StepLabel","StepContent","Grid","container","Object","keys","options","idx","item","xs","sm","constructKey","Button","startIcon","disabled","endIcon","HCQuestionnaireTips","useSharedTipStyling","List","list","component","HCQuestionnaire","role","md","SectionTitle","Spacer","space","Divider","ExpandableNav","disablePadding","ListItem","button","Link","to","HealthCheckList","ListItemIcon","ListItemText","PageTip","tip","listStyle","usePageTipStyles","root","position","left","bottom","icon","marginRight","drawer","padding","maxWidth","width","closeBox","paddingBottom","borderBottom","borderBottomColor","grey","borderBottomStyle","drawerOpen","setDrawerOpen","toggleDrawer","open","event","KeyboardEvent","type","Fab","Drawer","anchor","onClose","classes","paper","createElement","useSTStyles","fontWeight","children","props","HealthCheckDB","healthChecks","this","database","transaction","table","name","where","first","equals","toArray","ILogicLayer"],"mappings":"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","file":"static/js/27.92000257.chunk.js","sourcesContent":["import { makeStyles } from \"@material-ui/core\"\n\n// eslint-disable-next-line import/prefer-default-export\nexport const useQuestionnaireStyles = makeStyles((theme) => ({\n\tactions: {\n\t\tdisplay: \"flex\",\n\t\tflexDirection: \"column\",\n\t\tmarginTop: theme.spacing(5),\n\t\t[theme.breakpoints.up(\"sm\")]: {\n\t\t\tflexDirection: \"row\",\n\t\t\tjustifyContent: \"space-between\",\n\t\t},\n\t\t\"& button:first-child\": {\n\t\t\t[theme.breakpoints.down(\"sm\")]: {\n\t\t\t\tmarginBottom: theme.spacing(1),\n\t\t\t},\n\t\t},\n\t},\n\tsubtitle: {\n\t\tmarginTop: theme.spacing(2),\n\t\tlineHeight: 1,\n\t\t[theme.breakpoints.down(\"sm\")]: {\n\t\t\tmarginTop: theme.spacing(4),\n\t\t},\n\t},\n\ttitle: {\n\t\tmarginBottom: theme.spacing(3),\n\t\t[theme.breakpoints.down(\"sm\")]: {\n\t\t\tfontSize: theme.typography.h5.fontSize,\n\t\t},\n\t},\n}))\n\n// Option tile styles\nexport const useOptionTileStyles = makeStyles(() => ({\n\tcardContent: {\n\t\tdisplay: \"flex\",\n\t\tflexDirection: \"column\",\n\t\talignItems: \"center\",\n\t},\n}))\n","import React, { ReactElement, MouseEvent } from \"react\"\nimport {\n\tCard,\n\tCardActionArea,\n\tCardContent,\n\tTypography,\n\tuseTheme,\n} from \"@material-ui/core\"\nimport { getOptionByAnswer } from \"../../_config/utilities\"\nimport { answerTheming } from \"../../_config/data\"\nimport { useOptionTileStyles } from \"../_config/styles\"\nimport { IQuestionnaireOptions } from \"../_config/shape\"\n\n/**\n * A single tile for the Health check questionnaire\n *\n * @param {QuestionOptions} {optionKey}\n * @param {string} {option}\n * @param {(QuestionOptions | boolean)} {currentAnswer}\n * @param {Function} {changeAnswer}\n * @returns ReactElement\n */\nconst OptionTile = ({\n\toptionKey,\n\toption,\n\tcurrentAnswer,\n\tchangeAnswer,\n}: IQuestionnaireOptions): ReactElement => {\n\tconst style = useOptionTileStyles()\n\tconst theme = getOptionByAnswer(optionKey, answerTheming)\n\tconst muiTheme = useTheme()\n\n\treturn (\n\t\t<Card\n\t\t\tonClick={(e: MouseEvent<HTMLDivElement>): void => {\n\t\t\t\tchangeAnswer(e, optionKey)\n\t\t\t}}\n\t\t\tstyle={{\n\t\t\t\tboxShadow:\n\t\t\t\t\tcurrentAnswer === optionKey\n\t\t\t\t\t\t? `inset 0 0 0 3px ${muiTheme.palette.primary.main}`\n\t\t\t\t\t\t: \"\",\n\t\t\t}}\n\t\t>\n\t\t\t<CardActionArea>\n\t\t\t\t<CardContent className={style.cardContent}>\n\t\t\t\t\t<Typography variant=\"h6\">{option}</Typography>\n\t\t\t\t\t<theme.Icon style={{ color: theme.color, fontSize: 50 }} />\n\t\t\t\t</CardContent>\n\t\t\t</CardActionArea>\n\t\t</Card>\n\t)\n}\n\nexport default OptionTile\n","import React, { ReactElement, useContext } from \"react\"\nimport { Typography } from \"@material-ui/core\"\nimport { useTheme } from \"@material-ui/core/styles\"\nimport { ClientContext } from \"../../state/client\"\n\n/**\n * Displays component if there is no current client\n *\n * @returns ReactElement\n */\nconst NoClientError = (): ReactElement => {\n\tconst theme = useTheme()\n\tconst {\n\t\tstate: { currentClient, clientSynced },\n\t} = useContext(ClientContext)\n\n\t/**\n\t * Checks if the current client is undefined after syncing with\n\t * the indexeddb\n\t *\n\t * @returns boolean\n\t */\n\tconst noClient = (): boolean =>\n\t\tclientSynced &&\n\t\t(typeof currentClient === \"undefined\" ||\n\t\t\ttypeof currentClient.id === \"undefined\")\n\n\treturn noClient() ? (\n\t\t<Typography\n\t\t\tvariant=\"h6\"\n\t\t\tcolor=\"error\"\n\t\t\tstyle={{ marginTop: theme.spacing(2), marginBottom: theme.spacing(2) }}\n\t\t>\n\t\t\tPlease select or add a client before continuing\n\t\t</Typography>\n\t) : (\n\t\t<></>\n\t)\n}\n\nexport default NoClientError\n","import React, { useState, ReactElement, useEffect, MouseEvent } from \"react\"\nimport {\n\tBox,\n\tGrid,\n\tButton,\n\tStepper,\n\tStep,\n\tStepLabel,\n\tStepContent,\n} from \"@material-ui/core\"\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\"\nimport ChevronRightIcon from \"@material-ui/icons/ChevronRight\"\nimport { useHistory } from \"react-router-dom\"\nimport { useQuestionnaireStyles } from \"./_config/styles\"\nimport { questions } from \"../_config/data\"\nimport { IQuestionStructure, QuestionOptions } from \"../_config/shape\"\nimport { constructKey, generateKey } from \"../../../util/lists/key\"\nimport { routeVarReplacement, PrivateRoutes } from \"../../../util/routes/routes\"\nimport { OptionTile } from \"./_partials\"\nimport NoClientError from \"../../NoClientError\"\nimport HealthCheckUseCase from \"../../../data/healthChecks/HealthCheckLogic\"\nimport { newTimestamp } from \"../../../util/dates\"\nimport useCurrentClient from \"../../../state/client/useCurrentClient\"\n\n/**\n * Questionnaire component for the Health checks\n * handles the logic for answering and submitting the quiz\n *\n * @returns ReactElement\n */\nconst Questionnaire = (): ReactElement => {\n\tconst [currentClient] = useCurrentClient()\n\tconst styles = useQuestionnaireStyles()\n\tconst [answers, setAnswers] = useState<QuestionOptions[]>([])\n\tconst [questionCount, setQuestionCount] = useState<number>(0)\n\tconst [currentQuestion, setCurrentQuestion] = useState<IQuestionStructure>(\n\t\tquestions[questionCount]\n\t)\n\tconst [key] = useState(generateKey())\n\tconst history = useHistory()\n\tconst stepLabels: string[] = questions.map((q) => q.question)\n\n\tuseEffect(() => {\n\t\tsetCurrentQuestion(questions[questionCount])\n\t}, [questionCount])\n\n\t/**\n\t * Changes the selected answer for the current question\n\t *\n\t * @param {MouseEvent<HTMLDivElement>} e Change event from clicking on the option\n\t * @param {QuestionOptions} answer Answer that was selected\n\t * @returns void\n\t */\n\tconst changeAnswer = (\n\t\te: MouseEvent<HTMLDivElement>,\n\t\tanswer: QuestionOptions\n\t): void => {\n\t\te.preventDefault()\n\t\tconst copy = [...answers]\n\t\tcopy[questionCount] = answer  // eslint-disable-line\n\t\tsetAnswers([...copy])\n\t}\n\n\t/**\n\t * Conditional to check if the user is on the final question\n\t *\n\t * @returns boolean\n\t */\n\tconst isFinalQuestion = (): boolean => questionCount === questions.length - 1\n\n\t/**\n\t * Redirects to the summary page\n\t *\n\t * @param {number} id ID of the health check to redirect to\n\t */\n\tconst redirectToSummary = (id: string): void => {\n\t\t// eslint-disable-next-line\n\t\thistory.push(\n\t\t\trouteVarReplacement(PrivateRoutes.HealthCheckSummary, [[\":id\", `${id}`]])\n\t\t)\n\t}\n\n\t/**\n\t * Submits the questionnaire and redirects to the summary page\n\t *\n\t * @async\n\t * @returns Promise<void>\n\t */\n\tconst handleSubmit = async (): Promise<void> => {\n\t\tif (!currentClient?.id) {\n\t\t\t// eslint-disable-next-line no-alert\n\t\t\talert(\n\t\t\t\t\"A client needs to be selected, please add or select a client before submitting\"\n\t\t\t)\n\t\t\treturn\n\t\t}\n\n\t\ttry {\n\t\t\tconst dbKey = await HealthCheckUseCase.create({\n\t\t\t\tclientId: currentClient.id,\n\t\t\t\tanswers,\n\t\t\t\tcreatedAt: newTimestamp(),\n\t\t\t})\n\t\t\tredirectToSummary(dbKey)\n\t\t} catch (e) {\n\t\t\t// TODO: Proper error checking\n\t\t\tconsole.error(e.stack || e)  // eslint-disable-line\n\t\t}\n\t}\n\n\treturn (\n\t\t<Box>\n\t\t\t<NoClientError />\n\n\t\t\t<Stepper\n\t\t\t\tactiveStep={questionCount}\n\t\t\t\torientation=\"vertical\"\n\t\t\t\tstyle={{ paddingLeft: 0, paddingRight: 0 }}\n\t\t\t>\n\t\t\t\t{stepLabels.map(\n\t\t\t\t\t(label): ReactElement => (\n\t\t\t\t\t\t<Step key={label}>\n\t\t\t\t\t\t\t<StepLabel>{label}</StepLabel>\n\t\t\t\t\t\t\t<StepContent>\n\t\t\t\t\t\t\t\t<Grid container spacing={2}>\n\t\t\t\t\t\t\t\t\t{(\n\t\t\t\t\t\t\t\t\t\tObject.keys(currentQuestion.options) as QuestionOptions[]\n\t\t\t\t\t\t\t\t\t).map(\n\t\t\t\t\t\t\t\t\t\t(option: QuestionOptions, idx: number): ReactElement => (\n\t\t\t\t\t\t\t\t\t\t\t<Grid item xs={12} sm={4} key={constructKey(key, idx)}>\n\t\t\t\t\t\t\t\t\t\t\t\t<OptionTile\n\t\t\t\t\t\t\t\t\t\t\t\t\toptionKey={option}\n\t\t\t\t\t\t\t\t\t\t\t\t\toption={currentQuestion.options[option]}\n\t\t\t\t\t\t\t\t\t\t\t\t\tchangeAnswer={changeAnswer}\n\t\t\t\t\t\t\t\t\t\t\t\t\tcurrentAnswer={answers[questionCount] || false}\n\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t</Grid>\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t</Grid>\n\t\t\t\t\t\t\t\t<Box className={styles.actions}>\n\t\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\t\tstartIcon={<ChevronLeftIcon />}\n\t\t\t\t\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\t\t\t\t\tcolor=\"primary\"\n\t\t\t\t\t\t\t\t\t\tdisabled={questionCount === 0}\n\t\t\t\t\t\t\t\t\t\tonClick={(e: MouseEvent<HTMLButtonElement>): void => {\n\t\t\t\t\t\t\t\t\t\t\te.preventDefault()\n\t\t\t\t\t\t\t\t\t\t\tsetQuestionCount(questionCount - 1)\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\tPrevious question\n\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\t\tendIcon={<ChevronRightIcon />}\n\t\t\t\t\t\t\t\t\t\tvariant=\"contained\"\n\t\t\t\t\t\t\t\t\t\tcolor=\"primary\"\n\t\t\t\t\t\t\t\t\t\tdisabled={typeof answers[questionCount] === \"undefined\"}\n\t\t\t\t\t\t\t\t\t\tonClick={(e: MouseEvent<HTMLButtonElement>): void => {\n\t\t\t\t\t\t\t\t\t\t\te.preventDefault()\n\t\t\t\t\t\t\t\t\t\t\tif (!isFinalQuestion()) {\n\t\t\t\t\t\t\t\t\t\t\t\tsetQuestionCount(questionCount + 1)\n\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\thandleSubmit()\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t{isFinalQuestion() ? \"View results\" : \"Next question\"}\n\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t</Box>\n\t\t\t\t\t\t\t</StepContent>\n\t\t\t\t\t\t</Step>\n\t\t\t\t\t)\n\t\t\t\t)}\n\t\t\t</Stepper>\n\t\t</Box>\n\t)\n}\n\nexport default Questionnaire\n","import React, { ReactElement } from \"react\"\nimport { Typography, List } from \"@material-ui/core\"\nimport useSharedTipStyling from \"./style\"\n\n/**\n * Tip displayed on the Health check questionnaire page\n *\n * @returns ReactElement\n */\nconst HCQuestionnaireTips = (): ReactElement => {\n\tconst styles = useSharedTipStyling()\n\n\treturn (\n\t\t<>\n\t\t\t<List className={styles.list}>\n\t\t\t\t<Typography component=\"li\">\n\t\t\t\t\tAnswer the questions to assess cash flow knowledge.\n\t\t\t\t</Typography>\n\t\t\t\t<Typography component=\"li\">\n\t\t\t\t\tCheck the results to identify areas of concern.\n\t\t\t\t</Typography>\n\t\t\t\t{/* <Typography component=\"li\">\n\t\t\t\tYou can retake the Health Check to track improvements.\n\t\t\t\t</Typography> */}\n\t\t\t</List>\n\t\t\t<Typography variant=\"h6\">Next Steps</Typography>\n\t\t\t<List className={styles.list}>\n\t\t\t\t<Typography component=\"li\">\n\t\t\t\t\tLook at your results and work through Discover Topics\n\t\t\t\t</Typography>\n\t\t\t\t<Typography component=\"li\">Prepare a Cash Flow Canvas.</Typography>\n\t\t\t</List>\n\t\t</>\n\t)\n}\n\nexport default HCQuestionnaireTips\n","import React, { ReactElement } from \"react\"\nimport {\n\tTypography,\n\tGrid,\n\tList,\n\tListItem,\n\tListItemIcon,\n\tListItemText,\n\tBox,\n\tDivider,\n} from \"@material-ui/core\"\nimport { Link } from \"react-router-dom\"\nimport ListIcon from \"@material-ui/icons/List\"\nimport { PageContainer } from \"../../components/Layouts\"\nimport PageTip from \"../../components/PageTip\"\nimport ExpandableNav from \"../../components/ExpandableNav\"\nimport { PrivateRoutes } from \"../../util/routes/routes\"\nimport Questionnaire from \"../../components/HealthCheck/Questionnaire/Questionnaire\"\nimport Spacer from \"../../components/Spacer\"\nimport SectionTitle from \"../../components/SectionTitle\"\nimport HCQuestionnaireTips from \"../../content/tips/HCQuestionnaireTips\"\n\n/**\n * Health check questionnaire page\n *\n * @returns ReactElement\n */\nconst HCQuestionnaire = (): ReactElement => (\n\t<>\n\t\t<PageContainer role=\"main\">\n\t\t\t<Grid container spacing={3}>\n\t\t\t\t<Grid item xs={12} md={9}>\n\t\t\t\t\t<SectionTitle component=\"h1\">Health Check</SectionTitle>\n\t\t\t\t\t<Spacer />\n\t\t\t\t\t<Box className=\"content-area\">\n\t\t\t\t\t\t<Typography>\n\t\t\t\t\t\t\tTen easy questions to learn more about the health of your\n\t\t\t\t\t\t\tbusiness.\n\t\t\t\t\t\t</Typography>\n\t\t\t\t\t\t<Typography className=\"list-describer\">\n\t\t\t\t\t\t\tThis quick Health Check will help you:\n\t\t\t\t\t\t</Typography>\n\t\t\t\t\t\t<List component=\"ul\" className=\"ul-list\">\n\t\t\t\t\t\t\t<Typography component=\"li\">\n\t\t\t\t\t\t\t\tassess your current knowledge of business cash flow\n\t\t\t\t\t\t\t</Typography>\n\t\t\t\t\t\t\t<Typography component=\"li\">\n\t\t\t\t\t\t\t\tidentify areas to improve your cash flow knowledge\n\t\t\t\t\t\t\t</Typography>\n\t\t\t\t\t\t</List>\n\t\t\t\t\t\t<Typography>\n\t\t\t\t\t\t\tYour results will show you key topics and activities to complete.\n\t\t\t\t\t\t</Typography>\n\t\t\t\t\t\t<Typography>\n\t\t\t\t\t\t\tAs you make changes to your business, you can use the Health Check\n\t\t\t\t\t\t\tto review your progress.\n\t\t\t\t\t\t</Typography>\n\t\t\t\t\t\t<Typography>\n\t\t\t\t\t\t\tIf you want to see your previous Health Checks, see ‘Saved Health\n\t\t\t\t\t\t\tChecks’ in the control panel.\n\t\t\t\t\t\t</Typography>\n\t\t\t\t\t</Box>\n\t\t\t\t\t<Spacer space={3} />\n\t\t\t\t\t<Divider />\n\t\t\t\t\t<Spacer />\n\t\t\t\t\t<Questionnaire />\n\t\t\t\t</Grid>\n\t\t\t\t<Grid item xs={12} md={3}>\n\t\t\t\t\t<ExpandableNav>\n\t\t\t\t\t\t<List component=\"nav\" disablePadding>\n\t\t\t\t\t\t\t<ListItem\n\t\t\t\t\t\t\t\tbutton\n\t\t\t\t\t\t\t\tcomponent={Link}\n\t\t\t\t\t\t\t\tto={PrivateRoutes.HealthCheckList}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<ListItemIcon>\n\t\t\t\t\t\t\t\t\t<ListIcon />\n\t\t\t\t\t\t\t\t</ListItemIcon>\n\t\t\t\t\t\t\t\t<ListItemText>Saved Health Checks</ListItemText>\n\t\t\t\t\t\t\t</ListItem>\n\t\t\t\t\t\t</List>\n\t\t\t\t\t</ExpandableNav>\n\t\t\t\t</Grid>\n\t\t\t</Grid>\n\t\t</PageContainer>\n\n\t\t<PageTip tip={HCQuestionnaireTips} />\n\t</>\n)\n\nexport default HCQuestionnaire\n","import { makeStyles } from \"@material-ui/core\"\n\n// Shared styling for the tip components\nconst useSharedTipStyling = makeStyles((theme) => ({\n\tlist: {\n\t\tlistStyle: \"disc\",\n\t\tpaddingLeft: theme.spacing(2),\n\t},\n}))\n\nexport default useSharedTipStyling\n","import { makeStyles } from \"@material-ui/core/styles\"\n\nconst usePageTipStyles = makeStyles((theme) => ({\n\troot: {\n\t\tposition: \"fixed\",\n\t\tleft: theme.spacing(2),\n\t\tbottom: theme.spacing(2),\n\t},\n\ticon: {\n\t\tmarginRight: theme.spacing(1),\n\t},\n\tdrawer: {\n\t\tpadding: theme.spacing(2),\n\t\tmaxWidth: \"350px\",\n\t\twidth: \"100%\",\n\t},\n\tcloseBox: {\n\t\tdisplay: \"flex\",\n\t\tjustifyContent: \"space-between\",\n\t\tmarginBottom: theme.spacing(2),\n\t\tpaddingBottom: theme.spacing(2),\n\t\tborderBottom: 1,\n\t\tborderBottomColor: theme.palette.grey[500],\n\t\tborderBottomStyle: \"solid\",\n\t},\n}))\n\nexport default usePageTipStyles\n","import React, { ReactElement, useState, MouseEvent, createElement } from \"react\"\nimport { Fab, Drawer, Button, Box, Typography } from \"@material-ui/core\"\nimport HelpOutlineIcon from \"@material-ui/icons/HelpOutline\"\nimport HighlightOffIcon from \"@material-ui/icons/HighlightOff\"\nimport usePageTipStyles from \"./_config/style\"\nimport { IPageTip } from \"./_config/shape\"\n\n/**\n * Renders a page tip tooltip at the bottom left of the page\n *\n * @param {string} {tip} File name (no extension) for the tip component\n * @returns ReactElement\n */\nconst PageTip = ({ tip }: IPageTip): ReactElement => {\n\tconst style = usePageTipStyles()\n\tconst [drawerOpen, setDrawerOpen] = useState<boolean>(false)\n\n\t/**\n\t * Toggles the state of the drawer\n\t *\n\t * @param {Boolean} open State to change the drawer to\n\t * @param {KeyboardEvent|MouseEvent<HTMLButtonElement>} event Event generated by a keypress|click\n\t */\n\tconst toggleDrawer =\n\t\t(open: boolean) =>\n\t\t(event: KeyboardEvent | MouseEvent<HTMLButtonElement>): void => {\n\t\t\tif (event instanceof KeyboardEvent) {\n\t\t\t\tif (\n\t\t\t\t\tevent.type === \"keydown\" &&\n\t\t\t\t\t(event.key === \"Tab\" || event.key === \"Shift\")\n\t\t\t\t) {\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Change the state of the drawer\n\t\t\tsetDrawerOpen(open)\n\t\t}\n\n\treturn (\n\t\t<>\n\t\t\t<div className={style.root} role=\"complementary\">\n\t\t\t\t<Fab color=\"secondary\" onClick={toggleDrawer(true)} variant=\"extended\">\n\t\t\t\t\t<HelpOutlineIcon className={style.icon} />\n\t\t\t\t\tTips\n\t\t\t\t</Fab>\n\t\t\t</div>\n\t\t\t<Drawer\n\t\t\t\tanchor=\"left\"\n\t\t\t\topen={drawerOpen}\n\t\t\t\tonClose={toggleDrawer(false)}\n\t\t\t\tclasses={{\n\t\t\t\t\tpaper: style.drawer,\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t<Box className={style.closeBox}>\n\t\t\t\t\t<Typography variant=\"h6\">Tips</Typography>\n\t\t\t\t\t<Button\n\t\t\t\t\t\tonClick={toggleDrawer(false)}\n\t\t\t\t\t\tstartIcon={<HighlightOffIcon />}\n\t\t\t\t\t>\n\t\t\t\t\t\tClose\n\t\t\t\t\t</Button>\n\t\t\t\t</Box>\n\n\t\t\t\t{createElement(tip, {})}\n\t\t\t</Drawer>\n\t\t</>\n\t)\n}\n\nexport default PageTip\n","import { makeStyles } from \"@material-ui/core\"\n\n// Section title styles\nconst useSTStyles = makeStyles((theme) => ({\n\ttitle: {\n\t\tfontWeight: 500,\n\t\tmarginBottom: theme.spacing(2),\n\t\t[theme.breakpoints.down(\"sm\")]: {\n\t\t\tfontSize: theme.typography.h5.fontSize,\n\t\t},\n\t},\n}))\n\nexport default useSTStyles\n","import React, { ReactElement } from \"react\"\nimport { Typography } from \"@material-ui/core\"\nimport { SectionTitleProps } from \"./_config/shape\"\nimport useSTStyles from \"./_config/styles\"\n\n/**\n * Abstraction for the Typography for a consistent heading for sections\n *\n * @param {SectionTitleProps} props Mimics the props for `<Typography>`\n * @returns ReactElement\n */\nconst SectionTitle = ({\n\tchildren,\n\tclassName,\n\t// eslint-disable-next-line\n\t...props\n}: SectionTitleProps): ReactElement => {\n\tconst styles = useSTStyles()\n\treturn (\n\t\t<Typography\n\t\t\tvariant=\"h4\"\n\t\t\tcolor=\"textPrimary\"\n\t\t\tclassName={`${styles.title} ${className}`}\n\t\t\t// eslint-disable-next-line react/jsx-props-no-spreading\n\t\t\t{...props}\n\t\t>\n\t\t\t{children}\n\t\t</Typography>\n\t)\n}\n\nexport default SectionTitle\n","import ILogicLayer from \"../_config/logicLayer\"\nimport HealthCheckDB from \"./HealthCheckDatabase\"\nimport {\n\tHealthCheckDataStruct,\n\tBaseHealthCheckStruct,\n\tHealthCheckId,\n\tClientId,\n} from \"../_config/shape\"\n\n/**\n * Logic implementation for the Health check database\n *\n * @class HealthCheckLogic\n * @extends {ILogicLayer<HealthCheckDataStruct, BaseHealthCheckStruct>}\n */\nclass HealthCheckLogic extends ILogicLayer<\n\tHealthCheckDataStruct,\n\tBaseHealthCheckStruct\n> {\n\t/**\n\t * Creates an instance of HealthCheckLogic.\n\t *\n\t * @memberof HealthCheckLogic\n\t */\n\tconstructor() {\n\t\tsuper(HealthCheckDB, HealthCheckDB.healthChecks)\n\t}\n\n\t/**\n\t * Finds a health check by the id and clientId\n\t *\n\t * @param {HealthCheckId} id\n\t * @param {ClientId} clientId\n\t * @returns {Promise<HealthCheckDataStruct>}\n\t * @memberof HealthCheckLogic\n\t */\n\tpublic findByClientId(\n\t\tid: HealthCheckId,\n\t\tclientId: ClientId\n\t): Promise<HealthCheckDataStruct | undefined> {\n\t\treturn this.database.transaction(\"r\", this.table.name, () =>\n\t\t\tthis.table.where({ id, clientId }).first()\n\t\t)\n\t}\n\n\t/**\n\t * Finds all the health checks for a given client\n\t *\n\t * @param {ClientId} clientId\n\t * @returns {Promise<HealthCheckDataStruct[]>}\n\t * @memberof HealthCheckLogic\n\t */\n\tpublic findClientHealthChecks(\n\t\tclientId: ClientId\n\t): Promise<HealthCheckDataStruct[]> {\n\t\treturn this.database.transaction(\"r\", this.table.name, () =>\n\t\t\tthis.table.where(\"clientId\").equals(clientId).toArray()\n\t\t)\n\t}\n}\n\n// Creates a instance of the logic class and exports the instance\nconst HealthCheckUseCase = new HealthCheckLogic()\n\nexport default HealthCheckUseCase\n"],"sourceRoot":""}