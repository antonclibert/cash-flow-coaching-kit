{"version":3,"sources":["../node_modules/@material-ui/icons/Visibility.js","../node_modules/@material-ui/core/esm/ListItemSecondaryAction/ListItemSecondaryAction.js","components/HealthCheck/Listing/_config/machine.ts","components/HealthCheck/Listing/_partials/EmptyListing.tsx","components/ViewIconButton/ViewIconButton.tsx","components/HealthCheck/Listing/_partials/QuizList.tsx","components/HealthCheck/Listing/_config/styles.ts","components/HealthCheck/Listing/Listing.tsx","pages/HealthCheck/listing.tsx","components/SectionTitle/_config/styles.ts","components/SectionTitle/SectionTitle.tsx","data/healthChecks/HealthCheckLogic.ts","components/IconDeleteButton/IconDeleteButtonwDialog.tsx"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","default","_react","_default","createElement","d","ListItemSecondaryAction","React","props","ref","classes","className","other","_objectWithoutProperties","_extends","clsx","root","muiName","withStyles","position","right","top","transform","name","HCListingMachine","Machine","key","initial","states","loading","on","IS_EMPTY","HAS_ITEMS","empty","hasItems","EmptyListing","CardContent","Typography","variant","to","PrivateRoutes","ClientList","routeVarReplacement","HealthCheckQuiz","ViewIconButton","goTo","Tooltip","title","IconButton","component","Link","QuizList","clientQuizzes","removeHealthCheck","removeItem","useCallback","id","e","preventDefault","List","map","quiz","ListItem","ListItemText","primary","secondary","createdAt","format","HealthCheckSummary","IconDeleteButtonwDialog","onClick","useListingStyles","makeStyles","actions","display","justifyContent","alignItems","Listing","useMachine","state","send","useContext","ClientContext","currentClient","lastViewedHC","dispatch","useState","setClientQuizzess","styles","useEffect","fetchQuizzes","a","HealthCheckUseCase","findClientHealthChecks","q","length","delete","type","ClientActionTypes","UpdateLastViewedHC","payload","copy","filter","item","console","error","stack","Card","Loading","renderQuizData","Divider","Button","startIcon","size","color","HCListing","role","SectionTitle","Box","Spacer","space","Grid","sm","useSTStyles","theme","fontWeight","marginBottom","spacing","breakpoints","down","fontSize","typography","h5","children","HealthCheckDB","healthChecks","clientId","this","database","transaction","table","where","first","equals","toArray","ILogicLayer","dialogOpen","setDialogOpen","onDialogClose","open","onClose","onCancel","onConfirm"],"mappings":"+GAEA,IAAIA,EAAyBC,EAAQ,IAErCC,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAETD,EAAQE,aAAU,EAElB,IAAIC,EAASP,EAAuBC,EAAQ,IAIxCO,GAAW,EAFMR,EAAuBC,EAAQ,KAElBK,SAASC,EAAOD,QAAQG,cAAc,OAAQ,CAC9EC,EAAG,sNACD,cAEJN,EAAQE,QAAUE,G,kCCjBlB,+CAmBIG,EAAuCC,cAAiB,SAAiCC,EAAOC,GAClG,IAAIC,EAAUF,EAAME,QAChBC,EAAYH,EAAMG,UAClBC,EAAQC,YAAyBL,EAAO,CAAC,UAAW,cAExD,OAAoBD,gBAAoB,MAAOO,YAAS,CACtDH,UAAWI,kBAAKL,EAAQM,KAAML,GAC9BF,IAAKA,GACJG,OAwBLN,EAAwBW,QAAU,0BACnBC,gBA9CK,CAElBF,KAAM,CACJG,SAAU,WACVC,MAAO,GACPC,IAAK,MACLC,UAAW,qBAwCmB,CAChCC,KAAM,8BADOL,CAEZZ,I,kOC7BUkB,EAAmBC,YAI9B,CACDC,IAAK,qBACLC,QAAS,UACTC,OAAQ,CACPC,QAAS,CACRC,GAAI,CACHC,SAAU,QACVC,UAAW,aAGbC,MAAO,GACPC,SAAU,CACTJ,GAAI,CACHC,SAAU,aCTCI,EApBM,WACpB,OACC,kBAACC,EAAA,EAAD,KACC,kBAACC,EAAA,EAAD,CAAYC,QAAQ,MAApB,oCACA,kBAACD,EAAA,EAAD,uCACiC,IAChC,kBAAC,IAAD,CAAME,GAAIC,IAAcC,YAAxB,mBAFD,MAE+D,IAC9D,kBAAC,IAAD,CACCF,GAAIG,YAAoBF,IAAcG,gBAAiB,CACtD,CAAC,OAAQ,OAFX,4BAHD,O,2FCAY,SAASC,EAAT,GAAwD,IAA9BC,EAA6B,EAA7BA,KACxC,OACC,kBAACC,EAAA,EAAD,CAASC,MAAM,QACd,kBAACC,EAAA,EAAD,CAAYC,UAAWC,IAAMX,GAAIM,GAChC,kBAAC,IAAD,MACA,0BAAMlC,UAAU,wBAAhB,kBCEJ,IAwCewC,EAxCE,SAAC,GAGmB,IAFpCC,EAEmC,EAFnCA,cACAC,EACmC,EADnCA,kBAEMC,EAAaC,uBAClB,SAACC,GAAD,OAAuB,SAACC,GACvBA,EAAEC,iBACFL,EAAkBG,MAEnB,CAACH,IAGF,OACC,kBAACM,EAAA,EAAD,KACEP,EAAcQ,KACd,SAACC,GAAD,OACC,kBAACC,EAAA,EAAD,CAAUpC,IAAKmC,EAAKL,GAAI7C,UAAU,oBACjC,kBAACoD,EAAA,EAAD,CACCC,QAAQ,yBACRC,YACCJ,EAAKK,WACFC,YAAON,EAAKK,UAAW,wBAI5B,kBAAC5D,EAAA,EAAD,KACC,kBAACsC,EAAD,CACCC,KAAMH,YAAoBF,IAAc4B,mBAAoB,CAC3D,CAAC,MAAD,UAAWP,EAAKL,SAGlB,kBAACa,EAAA,EAAD,CAAyBC,QAAShB,EAAWO,EAAKL,IAAM,a,kBC5ChDe,EARUC,aAAW,iBAAO,CAC1CC,QAAS,CACRC,QAAS,OACTC,eAAgB,WAChBC,WAAY,c,iBCoICC,EAlHC,WAAqB,IAAD,EACbC,qBAAWtD,GADE,mBAC5BuD,EAD4B,KACrBC,EADqB,OAK/BC,qBAAWC,KALoB,IAGlCH,MAASI,EAHyB,EAGzBA,cAAeC,EAHU,EAGVA,aACxBC,EAJkC,EAIlCA,SAJkC,EAMQC,mBAC1C,IAPkC,mBAM5BlC,EAN4B,KAMbmC,EANa,KAS7BC,EAASjB,IAEfkB,qBAAU,WACT,IAAMC,EAAY,uCAAG,WAAOlC,GAAP,eAAAmC,EAAA,sEACJC,IAAmBC,uBAAuBrC,GADtC,OAEH,KADXsC,EADc,QAEdC,OAELf,EAAK,aAGLO,EAAkBO,GAClBd,EAAK,cARc,2CAAH,sDAalB,UAAIG,QAAJ,IAAIA,OAAJ,EAAIA,EAAe3B,GAAI,CAEtB,IAAK2B,EAEJ,YADAH,EAAK,YAINU,EAAaP,EAAc3B,OAE1B,CAAC2B,EAAeH,IAQnB,IAAM3B,EAAiB,uCAAG,WAAOG,GAAP,eAAAmC,EAAA,+EAEJC,IAAmBI,OAAOxC,GAFtB,cAMZ,IACU,OAAjB4B,GAAyB,UAAG5B,KAAH,UAAe4B,IAC3CC,EAAS,CACRY,KAAMC,IAAkBC,mBACxBC,QAAS,OAKS,KADdC,EAAOjD,EAAckD,QAAO,SAACC,GAAD,OAAUA,EAAK/C,KAAOA,MAC/CuC,QACRf,EAAK,YAENO,EAAkBc,IAlBK,gDAsBxBG,QAAQC,MAAM,KAAEC,OAAF,MAtBU,yDAAH,sDAkDvB,OACC,kBAACC,EAAA,EAAD,KApBsB,WACtB,OAAQ5B,EAAM/E,OACb,IAAK,QACJ,OAAO,kBAAC,EAAD,MAER,IAAK,WACJ,OACC,kBAAC,EAAD,CACCoD,cAAeA,EACfC,kBAAmBA,IAItB,IAAK,UACL,QACC,OAAO,kBAACuD,EAAA,EAAD,OAMPC,GACD,kBAACC,EAAA,EAAD,MACA,kBAAC1E,EAAA,EAAD,CAAazB,UAAW6E,EAAOf,SAC9B,kBAACsC,EAAA,EAAD,CACCC,UAAW,kBAAC,IAAD,MACXC,KAAK,SACLhE,UAAWC,IACXX,GAAIG,YAAoBF,IAAcG,gBAAiB,CACtD,CAAC,OAAQ,MAEVuE,MAAM,UACN5E,QAAQ,aART,+B,iBCxFW6E,UAtBG,WACjB,OACC,oCACC,kBAAC,IAAD,CAAeC,KAAK,QACnB,kBAACC,EAAA,EAAD,CAAcpE,UAAU,MAAxB,uBACA,kBAACqE,EAAA,EAAD,CAAK3G,UAAU,gBACd,kBAAC0B,EAAA,EAAD,iEAGA,kBAACA,EAAA,EAAD,kEAID,kBAACkF,EAAA,EAAD,CAAQC,MAAO,IACf,kBAACC,EAAA,EAAD,CAAMlB,MAAI,EAACmB,GAAI,GACd,kBAAC,EAAD,W,yHCdUC,EAVKnD,aAAW,SAACoD,GAAD,MAAY,CAC1C7E,MAAM,aACL8E,WAAY,IACZC,aAAcF,EAAMG,QAAQ,IAC3BH,EAAMI,YAAYC,KAAK,MAAQ,CAC/BC,SAAUN,EAAMO,WAAWC,GAAGF,eCsBlBb,EAnBM,SAAC,GAIkB,IAHvCgB,EAGsC,EAHtCA,SACA1H,EAEsC,EAFtCA,UACGH,EACmC,wCAChCgF,EAASmC,IACf,OACC,kBAACtF,EAAA,EAAD,eACCC,QAAQ,KACR4E,MAAM,cACNvG,UAAS,UAAK6E,EAAOzC,MAAZ,YAAqBpC,IAE1BH,GAEH6H,K,uFCqCEzC,EAAqB,I,kDAtC1B,aAAe,uCACR0C,IAAeA,IAAcC,c,2DAYnC/E,EACAgF,GAC8C,IAAD,OAC7C,OAAOC,KAAKC,SAASC,YAAY,IAAKF,KAAKG,MAAMrH,MAAM,WACtD,OAAO,EAAKqH,MAAMC,MAAM,CAAErF,KAAIgF,aAAYM,a,6CAY3CN,GACoC,IAAD,OACnC,OAAOC,KAAKC,SAASC,YAAY,IAAKF,KAAKG,MAAMrH,MAAM,WACtD,OAAO,EAAKqH,MAAMC,MAAM,YAAYE,OAAOP,GAAUQ,iB,GAzCzBC,MAiDhBrD,O,iHClDA,SAASvB,EAAT,GAEgB,IAD9BC,EAC6B,EAD7BA,QAC6B,EACOgB,oBAAkB,GADzB,mBACtB4D,EADsB,KACVC,EADU,KAO7B,SAASC,IACRD,GAAc,GAuBf,OACC,oCACC,kBAAC,IAAD,CAAkB7E,QAPpB,SAAuBb,GACtBA,EAAEC,iBACFyF,GAAc,MAMb,kBAAC,IAAD,CACCE,KAAMH,EACNI,QAASF,EACTG,SAAUH,EACVI,UAtBH,SAAyB/F,GACxBa,EAAQb,GACR2F,MAgBC","file":"static/js/34.0fdf392e.chunk.js","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)(_react.default.createElement(\"path\", {\n  d: \"M12 4.5C7 4.5 2.73 7.61 1 12c1.73 4.39 6 7.5 11 7.5s9.27-3.11 11-7.5c-1.73-4.39-6-7.5-11-7.5zM12 17c-2.76 0-5-2.24-5-5s2.24-5 5-5 5 2.24 5 5-2.24 5-5 5zm0-8c-1.66 0-3 1.34-3 3s1.34 3 3 3 3-1.34 3-3-1.34-3-3-3z\"\n}), 'Visibility');\n\nexports.default = _default;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    position: 'absolute',\n    right: 16,\n    top: '50%',\n    transform: 'translateY(-50%)'\n  }\n};\n/**\n * Must be used as the last child of ListItem to function properly.\n */\n\nvar ListItemSecondaryAction = /*#__PURE__*/React.forwardRef(function ListItemSecondaryAction(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\"]);\n\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    className: clsx(classes.root, className),\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? ListItemSecondaryAction.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component, normally an `IconButton` or selection control.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string\n} : void 0;\nListItemSecondaryAction.muiName = 'ListItemSecondaryAction';\nexport default withStyles(styles, {\n  name: 'MuiListItemSecondaryAction'\n})(ListItemSecondaryAction);","import { Machine } from \"xstate\"\r\n\r\nexport type StateMap = \"loading\" | \"empty\" | \"hasItems\"\r\n\r\n/**\r\n * Health checking listing state machine schema\r\n *\r\n * @export\r\n * @interface IHCListingSchema\r\n */\r\nexport interface IHCListingSchema {\r\n\tstates: {\r\n\t\tloading: {}\r\n\t\tempty: {}\r\n\t\thasItems: {}\r\n\t}\r\n}\r\n\r\nexport type HCListingEvents = { type: \"IS_EMPTY\" } | { type: \"HAS_ITEMS\" }\r\n\r\n/**\r\n * Defines the state machine used for the Health check\r\n * listing component\r\n *\r\n */\r\nexport const HCListingMachine = Machine<\r\n\tnull,\r\n\tIHCListingSchema,\r\n\tHCListingEvents\r\n>({\r\n\tkey: \"hc_listing_machine\",\r\n\tinitial: \"loading\",\r\n\tstates: {\r\n\t\tloading: {\r\n\t\t\ton: {\r\n\t\t\t\tIS_EMPTY: \"empty\",\r\n\t\t\t\tHAS_ITEMS: \"hasItems\",\r\n\t\t\t},\r\n\t\t},\r\n\t\tempty: {},\r\n\t\thasItems: {\r\n\t\t\ton: {\r\n\t\t\t\tIS_EMPTY: \"empty\",\r\n\t\t\t},\r\n\t\t},\r\n\t},\r\n})\r\n","import React, { ReactElement } from \"react\"\r\nimport { CardContent, Typography } from \"@material-ui/core\"\r\nimport { Link } from \"react-router-dom\"\r\nimport {\r\n\tPrivateRoutes,\r\n\trouteVarReplacement,\r\n} from \"../../../../util/routes/routes\"\r\n\r\n/**\r\n * Message displayed when a client has no completed quizzes\r\n *\r\n * @returns ReactElement\r\n */\r\nconst EmptyListing = (): ReactElement => {\r\n\treturn (\r\n\t\t<CardContent>\r\n\t\t\t<Typography variant=\"h6\">No Health Checks have been found</Typography>\r\n\t\t\t<Typography>\r\n\t\t\t\tCheck that you have the correct{\" \"}\r\n\t\t\t\t<Link to={PrivateRoutes.ClientList}>client selected</Link> or{\" \"}\r\n\t\t\t\t<Link\r\n\t\t\t\t\tto={routeVarReplacement(PrivateRoutes.HealthCheckQuiz, [\r\n\t\t\t\t\t\t[\":id?\", \"\"],\r\n\t\t\t\t\t])}\r\n\t\t\t\t>\r\n\t\t\t\t\tstart a new Health Check\r\n\t\t\t\t</Link>\r\n\t\t\t\t.\r\n\t\t\t</Typography>\r\n\t\t</CardContent>\r\n\t)\r\n}\r\n\r\nexport default EmptyListing\r\n","import React, { ReactElement } from \"react\"\r\nimport VisibilityIcon from \"@material-ui/icons/Visibility\"\r\nimport { Tooltip, IconButton } from \"@material-ui/core\"\r\nimport { Link } from \"react-router-dom\"\r\nimport { PrivateRoutes, PublicRoutes } from \"../../util/routes/routes\"\r\n\r\ntype Props = {\r\n\tgoTo: string | PrivateRoutes | PublicRoutes\r\n}\r\n\r\n/**\r\n * Icon Button used to go to a page\r\n *\r\n * @export\r\n * @param {Props} { goTo }\r\n * @returns {ReactElement}\r\n */\r\nexport default function ViewIconButton({ goTo }: Props): ReactElement {\r\n\treturn (\r\n\t\t<Tooltip title=\"View\">\r\n\t\t\t<IconButton component={Link} to={goTo}>\r\n\t\t\t\t<VisibilityIcon />\r\n\t\t\t\t<span className=\"MuiTypography-srOnly\">View resutls</span>\r\n\t\t\t</IconButton>\r\n\t\t</Tooltip>\r\n\t)\r\n}\r\n","import React, { ReactElement, MouseEvent, useCallback } from \"react\"\r\nimport {\r\n\tList,\r\n\tListItem,\r\n\tListItemText,\r\n\tListItemSecondaryAction,\r\n} from \"@material-ui/core\"\r\nimport { format } from \"date-fns\"\r\nimport {\r\n\trouteVarReplacement,\r\n\tPrivateRoutes,\r\n} from \"../../../../util/routes/routes\"\r\nimport { IQuizListProps } from \"../_config/shape\"\r\nimport IconDeleteButtonwDialog from \"../../../IconDeleteButton/IconDeleteButtonwDialog\"\r\nimport { HealthCheckId } from \"../../../../data/_config/shape\"\r\nimport ViewIconButton from \"../../../ViewIconButton\"\r\n\r\n/**\r\n * Renders a list of completed health checks\r\n *\r\n * @param {IBaseHealthCheck[]} {clientQuizzes}\r\n * @param {Function} {removeHealthCheck}\r\n * @returns ReactElement\r\n */\r\nconst QuizList = ({\r\n\tclientQuizzes,\r\n\tremoveHealthCheck,\r\n}: IQuizListProps): ReactElement => {\r\n\tconst removeItem = useCallback(\r\n\t\t(id: HealthCheckId) => (e: MouseEvent<HTMLButtonElement>): void => {\r\n\t\t\te.preventDefault()\r\n\t\t\tremoveHealthCheck(id)\r\n\t\t},\r\n\t\t[removeHealthCheck]\r\n\t)\r\n\r\n\treturn (\r\n\t\t<List>\r\n\t\t\t{clientQuizzes.map(\r\n\t\t\t\t(quiz): ReactElement => (\r\n\t\t\t\t\t<ListItem key={quiz.id} className=\"list-item-padded\">\r\n\t\t\t\t\t\t<ListItemText\r\n\t\t\t\t\t\t\tprimary=\"Completed Health Check\"\r\n\t\t\t\t\t\t\tsecondary={\r\n\t\t\t\t\t\t\t\tquiz.createdAt\r\n\t\t\t\t\t\t\t\t\t? format(quiz.createdAt, \"dd/MM/yyyy hh:mm a\")\r\n\t\t\t\t\t\t\t\t\t: false\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t<ListItemSecondaryAction>\r\n\t\t\t\t\t\t\t<ViewIconButton\r\n\t\t\t\t\t\t\t\tgoTo={routeVarReplacement(PrivateRoutes.HealthCheckSummary, [\r\n\t\t\t\t\t\t\t\t\t[\":id\", `${quiz.id}`],\r\n\t\t\t\t\t\t\t\t])}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t<IconDeleteButtonwDialog onClick={removeItem(quiz.id || \"\")} />\r\n\t\t\t\t\t\t</ListItemSecondaryAction>\r\n\t\t\t\t\t</ListItem>\r\n\t\t\t\t)\r\n\t\t\t)}\r\n\t\t</List>\r\n\t)\r\n}\r\n\r\nexport default QuizList\r\n","import { makeStyles } from \"@material-ui/core\"\r\n\r\n// Health check Listing styling\r\nconst useListingStyles = makeStyles(() => ({\r\n\tactions: {\r\n\t\tdisplay: \"flex\",\r\n\t\tjustifyContent: \"flex-end\",\r\n\t\talignItems: \"center\",\r\n\t},\r\n}))\r\n\r\nexport default useListingStyles\r\n","import React, { ReactElement, useEffect, useContext, useState } from \"react\"\r\nimport { Card, CardContent, Divider, Button } from \"@material-ui/core\"\r\nimport { Link } from \"react-router-dom\"\r\nimport AddIcon from \"@material-ui/icons/Add\"\r\nimport { useMachine } from \"@xstate/react\"\r\nimport { ClientContext } from \"../../../state/client\"\r\nimport { PrivateRoutes, routeVarReplacement } from \"../../../util/routes/routes\"\r\nimport { HCListingMachine } from \"./_config/machine\"\r\nimport { EmptyListing, QuizList } from \"./_partials\"\r\nimport Loading from \"../../Loading\"\r\nimport useListingStyles from \"./_config/styles\"\r\nimport {\r\n\tHealthCheckDataStruct,\r\n\tClientId,\r\n\tHealthCheckId,\r\n} from \"../../../data/_config/shape\"\r\nimport HealthCheckUseCase from \"../../../data/healthChecks/HealthCheckLogic\"\r\nimport { ClientActionTypes } from \"../../../state/client/client-outline\"\r\n\r\n/**\r\n * Component used to render the completed health checks for the\r\n * current client\r\n *\r\n * @returns ReactElement\r\n */\r\nconst Listing = (): ReactElement => {\r\n\tconst [state, send] = useMachine(HCListingMachine)\r\n\tconst {\r\n\t\tstate: { currentClient, lastViewedHC },\r\n\t\tdispatch,\r\n\t} = useContext(ClientContext)\r\n\tconst [clientQuizzes, setClientQuizzess] = useState<HealthCheckDataStruct[]>(\r\n\t\t[]\r\n\t)\r\n\tconst styles = useListingStyles()\r\n\r\n\tuseEffect(() => {\r\n\t\tconst fetchQuizzes = async (id: ClientId): Promise<void> => {\r\n\t\t\tconst q = await HealthCheckUseCase.findClientHealthChecks(id)\r\n\t\t\tif (q.length === 0) {\r\n\t\t\t\t// show empty warning\r\n\t\t\t\tsend(\"IS_EMPTY\")\r\n\t\t\t} else {\r\n\t\t\t\t// set the client quizzes and show the items\r\n\t\t\t\tsetClientQuizzess(q)\r\n\t\t\t\tsend(\"HAS_ITEMS\")\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Find fetching for the indexeddb is completed\r\n\t\tif (currentClient?.id) {\r\n\t\t\t// If there isn't a client, show empty warning\r\n\t\t\tif (!currentClient) {\r\n\t\t\t\tsend(\"IS_EMPTY\")\r\n\t\t\t\treturn\r\n\t\t\t}\r\n\r\n\t\t\tfetchQuizzes(currentClient.id)\r\n\t\t}\r\n\t}, [currentClient, send])\r\n\r\n\t/**\r\n\t * Removes a quiz from the db and state\r\n\t *\r\n\t * @param {number} id ID of the health check to remove\r\n\t * @returns Promise<void>\r\n\t */\r\n\tconst removeHealthCheck = async (id: HealthCheckId): Promise<void> => {\r\n\t\ttry {\r\n\t\t\tconst count = await HealthCheckUseCase.delete(id)\r\n\r\n\t\t\t// count === number of items deleted\r\n\t\t\t// only proceed if 1 or more was deleted (ideally should always be 1)\r\n\t\t\tif (count > 0) {\r\n\t\t\t\tif (lastViewedHC !== null && `${id}` === `${lastViewedHC}`) {\r\n\t\t\t\t\tdispatch({\r\n\t\t\t\t\t\ttype: ClientActionTypes.UpdateLastViewedHC,\r\n\t\t\t\t\t\tpayload: null,\r\n\t\t\t\t\t})\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst copy = clientQuizzes.filter((item) => item.id !== id)\r\n\t\t\t\tif (copy.length === 0) {\r\n\t\t\t\t\tsend(\"IS_EMPTY\")\r\n\t\t\t\t}\r\n\t\t\t\tsetClientQuizzess(copy)\r\n\t\t\t}\r\n\t\t} catch (e) {\r\n\t\t\t// TODO: At least show a toast message, please\r\n\t\t\tconsole.error(e.stack || e)\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Render a specific component for state of the state machine\r\n\t *\r\n\t * @returns ReactElement\r\n\t */\r\n\tconst renderQuizData = (): ReactElement => {\r\n\t\tswitch (state.value) {\r\n\t\t\tcase \"empty\":\r\n\t\t\t\treturn <EmptyListing />\r\n\r\n\t\t\tcase \"hasItems\":\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<QuizList\r\n\t\t\t\t\t\tclientQuizzes={clientQuizzes}\r\n\t\t\t\t\t\tremoveHealthCheck={removeHealthCheck}\r\n\t\t\t\t\t/>\r\n\t\t\t\t)\r\n\r\n\t\t\tcase \"loading\":\r\n\t\t\tdefault:\r\n\t\t\t\treturn <Loading />\r\n\t\t}\r\n\t}\r\n\r\n\treturn (\r\n\t\t<Card>\r\n\t\t\t{renderQuizData()}\r\n\t\t\t<Divider />\r\n\t\t\t<CardContent className={styles.actions}>\r\n\t\t\t\t<Button\r\n\t\t\t\t\tstartIcon={<AddIcon />}\r\n\t\t\t\t\tsize=\"medium\"\r\n\t\t\t\t\tcomponent={Link}\r\n\t\t\t\t\tto={routeVarReplacement(PrivateRoutes.HealthCheckQuiz, [\r\n\t\t\t\t\t\t[\":id?\", \"\"],\r\n\t\t\t\t\t])}\r\n\t\t\t\t\tcolor=\"primary\"\r\n\t\t\t\t\tvariant=\"contained\"\r\n\t\t\t\t>\r\n\t\t\t\t\tStart a new Health Check\r\n\t\t\t\t</Button>\r\n\t\t\t</CardContent>\r\n\t\t</Card>\r\n\t)\r\n}\r\n\r\nexport default Listing\r\n","import React, { ReactElement } from \"react\"\r\nimport { Typography, Grid, Box } from \"@material-ui/core\"\r\nimport { PageContainer } from \"../../components/Layouts\"\r\nimport Listing from \"../../components/HealthCheck/Listing/Listing\"\r\nimport SectionTitle from \"../../components/SectionTitle\"\r\nimport Spacer from \"../../components/Spacer\"\r\n\r\n/**\r\n * Health check listing page\r\n *\r\n * @returns ReactElement\r\n */\r\nconst HCListing = (): ReactElement => {\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<PageContainer role=\"main\">\r\n\t\t\t\t<SectionTitle component=\"h1\">Saved Health Checks</SectionTitle>\r\n\t\t\t\t<Box className=\"content-area\">\r\n\t\t\t\t\t<Typography>\r\n\t\t\t\t\t\tUse your previous Health Checks to review your progress.\r\n\t\t\t\t\t</Typography>\r\n\t\t\t\t\t<Typography>\r\n\t\t\t\t\t\tView your past results by selecting from the list below.\r\n\t\t\t\t\t</Typography>\r\n\t\t\t\t</Box>\r\n\t\t\t\t<Spacer space={3} />\r\n\t\t\t\t<Grid item sm={6}>\r\n\t\t\t\t\t<Listing />\r\n\t\t\t\t</Grid>\r\n\t\t\t</PageContainer>\r\n\t\t</>\r\n\t)\r\n}\r\n\r\nexport default HCListing\r\n","import { makeStyles } from \"@material-ui/core\"\r\n\r\n// Section title styles\r\nconst useSTStyles = makeStyles((theme) => ({\r\n\ttitle: {\r\n\t\tfontWeight: 500,\r\n\t\tmarginBottom: theme.spacing(2),\r\n\t\t[theme.breakpoints.down(\"sm\")]: {\r\n\t\t\tfontSize: theme.typography.h5.fontSize,\r\n\t\t},\r\n\t},\r\n}))\r\n\r\nexport default useSTStyles\r\n","import React, { ReactElement } from \"react\"\r\nimport { Typography } from \"@material-ui/core\"\r\nimport { SectionTitleProps } from \"./_config/shape\"\r\nimport useSTStyles from \"./_config/styles\"\r\n\r\n/**\r\n * Abstraction for the Typography for a consistent heading for sections\r\n *\r\n * @param {SectionTitleProps} props Mimics the props for `<Typography>`\r\n * @returns ReactElement\r\n */\r\nconst SectionTitle = ({\r\n\tchildren,\r\n\tclassName,\r\n\t...props\r\n}: SectionTitleProps): ReactElement => {\r\n\tconst styles = useSTStyles()\r\n\treturn (\r\n\t\t<Typography\r\n\t\t\tvariant=\"h4\"\r\n\t\t\tcolor=\"textPrimary\"\r\n\t\t\tclassName={`${styles.title} ${className}`}\r\n\t\t\t// eslint-disable-next-line react/jsx-props-no-spreading\r\n\t\t\t{...props}\r\n\t\t>\r\n\t\t\t{children}\r\n\t\t</Typography>\r\n\t)\r\n}\r\n\r\nexport default SectionTitle\r\n","import ILogicLayer from \"../_config/logicLayer\"\r\nimport HealthCheckDB from \"./HealthCheckDatabase\"\r\nimport {\r\n\tHealthCheckDataStruct,\r\n\tBaseHealthCheckStruct,\r\n\tHealthCheckId,\r\n\tClientId,\r\n} from \"../_config/shape\"\r\n\r\n/**\r\n * Logic implementation for the Health check database\r\n *\r\n * @class HealthCheckLogic\r\n * @extends {ILogicLayer<HealthCheckDataStruct, BaseHealthCheckStruct>}\r\n */\r\nclass HealthCheckLogic extends ILogicLayer<\r\n\tHealthCheckDataStruct,\r\n\tBaseHealthCheckStruct\r\n> {\r\n\t/**\r\n\t * Creates an instance of HealthCheckLogic.\r\n\t *\r\n\t * @memberof HealthCheckLogic\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper(HealthCheckDB, HealthCheckDB.healthChecks)\r\n\t}\r\n\r\n\t/**\r\n\t * Finds a health check by the id and clientId\r\n\t *\r\n\t * @param {HealthCheckId} id\r\n\t * @param {ClientId} clientId\r\n\t * @returns {Promise<HealthCheckDataStruct>}\r\n\t * @memberof HealthCheckLogic\r\n\t */\r\n\tpublic findByClientId(\r\n\t\tid: HealthCheckId,\r\n\t\tclientId: ClientId\r\n\t): Promise<HealthCheckDataStruct | undefined> {\r\n\t\treturn this.database.transaction(\"r\", this.table.name, () => {\r\n\t\t\treturn this.table.where({ id, clientId }).first()\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * Finds all the health checks for a given client\r\n\t *\r\n\t * @param {ClientId} clientId\r\n\t * @returns {Promise<HealthCheckDataStruct[]>}\r\n\t * @memberof HealthCheckLogic\r\n\t */\r\n\tpublic findClientHealthChecks(\r\n\t\tclientId: ClientId\r\n\t): Promise<HealthCheckDataStruct[]> {\r\n\t\treturn this.database.transaction(\"r\", this.table.name, () => {\r\n\t\t\treturn this.table.where(\"clientId\").equals(clientId).toArray()\r\n\t\t})\r\n\t}\r\n}\r\n\r\n// Creates a instance of the logic class and exports the instance\r\nconst HealthCheckUseCase = new HealthCheckLogic()\r\n\r\nexport default HealthCheckUseCase\r\n","import React, { ReactElement, MouseEvent, useState } from \"react\"\r\nimport { ButtonProps } from \"./IconDeleteButton\"\r\nimport IconDeleteButton from \".\"\r\nimport ConfirmDialogue from \"../ConfirmDialogue\"\r\n\r\n/**\r\n * Icon delete button with a confirm dialog component\r\n *\r\n * @export\r\n * @param {ButtonProps} {\r\n * \tonClick,\r\n * }\r\n * @returns {ReactElement}\r\n */\r\nexport default function IconDeleteButtonwDialog({\r\n\tonClick,\r\n}: ButtonProps): ReactElement {\r\n\tconst [dialogOpen, setDialogOpen] = useState<boolean>(false)\r\n\r\n\t/**\r\n\t * Closes the dialog\r\n\t *\r\n\t */\r\n\tfunction onDialogClose(): void {\r\n\t\tsetDialogOpen(false)\r\n\t}\r\n\r\n\t/**\r\n\t * Performs onClick prop function\r\n\t *\r\n\t * @param {MouseEvent<HTMLButtonElement>} e\r\n\t */\r\n\tfunction onDialogConfirm(e: MouseEvent<HTMLButtonElement>): void {\r\n\t\tonClick(e)\r\n\t\tonDialogClose()\r\n\t}\r\n\r\n\t/**\r\n\t * Opens the dialog\r\n\t *\r\n\t * @param {MouseEvent<HTMLButtonElement>} e\r\n\t */\r\n\tfunction triggerDialog(e: MouseEvent<HTMLButtonElement>): void {\r\n\t\te.preventDefault()\r\n\t\tsetDialogOpen(true)\r\n\t}\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<IconDeleteButton onClick={triggerDialog} />\r\n\t\t\t<ConfirmDialogue\r\n\t\t\t\topen={dialogOpen}\r\n\t\t\t\tonClose={onDialogClose}\r\n\t\t\t\tonCancel={onDialogClose}\r\n\t\t\t\tonConfirm={onDialogConfirm}\r\n\t\t\t>\r\n\t\t\t\tAre you sure you want to remove this item?\r\n\t\t\t</ConfirmDialogue>\r\n\t\t</>\r\n\t)\r\n}\r\n"],"sourceRoot":""}